#!/usr/bin/perl

#
# NethServer Samba
#
# Copyright (C) 2012 Nethesis srl
#
# Load the samba schema in LDAP configuration database. 
# Exit silently if the schema is already loaded.
#
#

use strict;

use NethServer::Directory;
use Net::LDAP::LDIF;
use Net::LDAP;

my $ldap = NethServer::Directory::connect();
my $internalSuffix = NethServer::Directory::getInternalSuffix();
my $exitCode = 0;

use Data::Dumper;

{ # BEGIN schema configuration
    my $ldif = Net::LDAP::LDIF->new("/etc/openldap/schema/samba.ldif", "r", onerror => 'die');
    my $sambaSchema = $ldif->read_entry();

    my $response = $ldap->search(
	base => 'cn=schema,cn=config',
	filter => 'cn=*samba',
	sizelimit => 1,
	scope => 'one',
	);
    
    if($response->count() == 0) {
	$sambaSchema->changetype('add');
	$response = $sambaSchema->update($ldap);	
	if( $response->is_error()) {
	    warn $response->error();	   
	    $exitCode ++;
	} else {
	    warn "Added samba.ldif schema\n";
	}
    }

} # END schema configuration

{ # BEGIN LDAP

    my $password = NethServer::Directory::getUserPassword('samba', 0, $ldap);

    #
    # Store the password in samba secrets.tdb database:
    #
    qx(smbpasswd -w '$password');

    my @entries = (
	[ "cn=samba,$internalSuffix",
	  merge => [
	      objectClass => ['device', 'simpleSecurityObject'],
	      cn => 'samba',
	      userPassword => NethServer::Directory::getUserPassword('samba', 1, $ldap),
	      description => "Samba ldapsam management account"
	  ] ],
	[ "ou=Computers,$internalSuffix",
	  merge => [
	      objectClass => ['top', 'organizationalUnit'],
	      ou => 'Computers',
	  ] ],       	
	[ "ou=Idmap,$internalSuffix",
	  merge => [
	      objectClass => ['top', 'organizationalUnit'],
	      ou => 'Idmap',
	  ] ],       	
	);

    foreach(@entries) {
	my $method = @{$_}[1];
	my $message = $ldap->$method(@{$_});
	if($message->is_error()) {
	    $exitCode ++;
	}
    }

    #
    # Modify Bdb ACL to grant write permission to samba 
    #
    my $accessSearch = $ldap->search(
    	base => "cn=config",
    	filter => "(&(olcSuffix=$internalSuffix)(objectClass=olcBdbConfig))",
    	sizelimit => 1,
    	scope => 'one'
    	);

    if($accessSearch->is_error()) {	
	warn "Cannot find `$internalSuffix` subtree";
    	$exitCode ++;
    } else {
    	my $aclEntry = $accessSearch->pop_entry();

    	if($aclEntry) {
	    my $sambaWho = qq( by dn.exact="cn=samba,$internalSuffix" peername.ip="127.0.0.1" write );
    	    my @olcAccess = $aclEntry->get_value('olcAccess');

	    foreach(@olcAccess) {
		s/ manage/ manage $sambaWho/ if (m/to \*/s && ! m/\Q$sambaWho\E/);
	    }

    	    # print Dumper([@olcAccess]);	    
    	    my $message = $ldap->modify(
    		$aclEntry->dn(),
    		replace => [
    		    olcAccess => [@olcAccess]
    		]);
	    
    	    if($message->is_error()) {    	
    		$exitCode ++;
    	    }
    	} 
    }
} # END LDAP

exit($exitCode);
