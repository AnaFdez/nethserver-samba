#!/usr/bin/perl

#
# NethServer Samba
#
# Create new group(s) in SAM database.
#
# The new group name is specified by the second argument to the script.
# If the group name value has not been set ALL groups in AccountDB are processed.
#
#
# Copyright (C) 2012 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::AccountsDB;

my $event = shift;
my $group = shift;
my @groups;
my $accountsDb = esmith::AccountsDB->open_ro();

my $exitCode = 0;

my $net = '/usr/bin/net';

if($group) {
    if($accountsDb->get_prop($group, 'type') ne 'group') {
	die("Invalid group account name: `$group`");
    }
    @groups = ($group);
} else {
    @groups = map { $_->key } $accountsDb->groups();   
}


foreach my $group (@groups) {

    # Check if a SAM entry exists (group or user)
    my $entrySid = qx($net sam show "$group" 2>/dev/null);
    chomp($entrySid);
    if($? == 0) {
	# warn "Skipping existing SAM entry `$group`: $entrySid";
	next;
    }

    # Add to SAM:
    qx($net sam mapunixgroup "$group");
    if($? != 0) {
	warn "Failed to add group `$group` in SAM database";
	$exitCode ++;
	next;
    }

}

exit(($exitCode > 0) ? 1 : 0);


